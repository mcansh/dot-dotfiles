# Did you know that double quotes actually make a difference here?
# Well I found that double quote meant the terminal executed some
# commands on launch

# git shortcuts
alias g='git'
alias ga='git add'
alias gaa='git add -A'
alias gcl='git clone'
alias gcl-submodules='git clone --recursive' # clone a repo with submodules
alias gimme-submodules='git submodule update --init --recursive' # when you already cloned the repo and need the submodules
alias gs='git s'
alias gp='git push'
alias gpf='git push -f'
alias gc='git commit -sm'
alias gf='git commit -s --fixup'
alias gl='g ld'
alias gpu='git pull'
alias gd='git diff'
alias gdd='git diff --staged'
alias gco='git checkout'
alias gh='git browse'
alias gt='git tag'

alias o='open .'

# fuck ruby <3
alias b='bundle exec'

# fix commit messages
alias fixthatfuckingcommit='git commit --amend -sam'

# Code
alias code='code-insiders .'
alias c='code'

alias showAllFiles='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'
alias hideAllFiles='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'

# start a local server
alias server='python -m SimpleHTTPServer'

# keep a log of installed brew files
alias brewfile='brew bundle dump --force; mv brewfile ~/.homesick/repos/dotfiles/Brewfile'

function brewup {
  echo '> 1/6 Updating Homebrew 📦'
  brew update
  echo '> 2/6 Checking Homebrew for issues ⛔️'
  brew doctor
  echo '> 3/6 Getting a list of oudated packages 📜'
  brew outdated
  outdatedPackages="$(brew outdated --numstat | wc -l)"
  if (( $outdatedPackages > 0 ))
  then
    echo '> 4/6 Upgrading packages 🚚'
    brew upgrade
  else
    echo 'No updates are available'
  fi
  echo "> 5/6 Removing dead symlinks 💀"
  brew prune
  echo '> 6/6 Cleaning up 🚮'
  brew cleanup
  brew cask cleanup
  echo '> Done. 🎉'
}


# Hide/show all desktop icons (useful when presenting)
alias hidedesktop='defaults write com.apple.finder CreateDesktop -bool false && killall Finder'
alias showdesktop='defaults write com.apple.finder CreateDesktop -bool true && killall Finder'

# Lock the screen (when going AFK)
alias afk='/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend'

# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias appflush='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder'

# software updates
alias update='softwareupdate -ia --verbose'

# update ruby gems
alias gemupdate='gem update ~/.gem'

# update everything
alias updateall='brewup && gemupdate && update'

# alias for making symlinks (alias)
alias makethisgohere='ln -s'

# make list actually list all
alias ls='ls -a'

# update gems in gemfile
alias bup='bundle update'

# maintenance scripts
alias maintenance='sudo periodic daily weekly monthly'

# slack emoji magic
alias slackmoji='sips -Z 128 $1'

# gifify 60fps
alias gifify60='gifify -r 60 $1'

# add space to dock
alias space='defaults write com.apple.dock persistent-apps -array-add "{'tile-type'='spacer-tile';}"; killall Dock'

# clone repo, cd into it, and open it in your desired editor.
function cloneOpen {
urls=('github.com' 'bitbucket.org' 'gitlab.com')
  url=$1
  for i in "${urls[@]}"
  do
    if [[ $url =~ $i ]]
    then
      if [[ $url =~ 'http://' || $url =~ 'https://' ]]
      then
        userRepo=${url#*://$i/}
      elif [[ $url =~ 'git@' ]]
      then
        userRepo=${url#*@$i:}
      fi
      repo=${userRepo#*/}
      repo_no_ext=$(basename ${repo#*/} .git)

      echo "> 1/3 Cloning repo from $i 🚚"
      git clone $url
      echo "> 2/3 Changing directories to $repo_no_ext 🔨"
      cd $repo_no_ext
      echo "> 3/3 Opening in $EDITOR 🛠"
      $EDITOR .
    fi
  done
}

alias please='sudo $(fc -ln -1)'

alias addESLint='cp ~/.eslintrc.js ./ && yarn add -D eslint eslint-config-airbnb-base eslint-plugin-{import, prettier}'
alias addNextJSESLint='cp ~/.eslintrc-nextjs.js ./.eslintrc.js && yarn add -D babel-eslint eslint eslint-config-{airbnb, prettier} eslint-plugin-{import, jsx-a11y, prettier, react} prettier'

alias fix-zsh-permissions='sudo chown -R $whoami:staff .oh-my-zsh .zs .zsh*'


alias yarn-upgrade='yarn upgrade-interactive --latest'
alias yarn-global-upgrade='yarn global upgrade-interactive'
alias list_global_npm_packages='npm list -g --depth=0'
alias gimme_bash='exec bash --login'

function gitFixLastCommit {
  emojis=('🌮' '🦄' '🍕' '📜' '📦')
  length=${#emojis[@]}
  index=$((RANDOM % $length + 1))
  emoji=${emojis[$index]}
  gitDiffCount="$(git diff --cached --numstat | wc -l)"
  if (($gitDiffCount > 0))
  then
    echo "> 1/2 Getting last commit's sha"
    sha="$(git rev-parse HEAD)"
    echo '> 2/2 commiting staged files'
    git commit -s --fixup $sha
    echo "> Done. ${emoji}"
  else
    echo "> Stage some stuff and then try again"
  fi
}


alias list_downloads='sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* "select LSQuarantineDataURLString from LSQuarantineEvent"'

alias clear_downloads='sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* "delete from LSQuarantineEvent"'

alias docker_list_containers='docker ps -aq'
alias docker_list_images='docker images -f "dangling=true" -q'
alias docker_remove_all_images='docker rmi -f $(docker images -q)'
alias docker_remove_all_containers='docker rm -f $(docker ps -a -q)'
alias docker_remove_containers='docker ps -q |xargs docker rm'
alias docker_remove_images='docker images -q |xargs docker rmi'
